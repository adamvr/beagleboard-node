@title = @title ? 'Untitled'
@fields = ['Periods', 'Amplitude', 'Frequency', 'Phase']
html ->
    head ->
        title "#{@title} | Osco"
        script src: '/javascript/jquery.js'
        #script src: '/javascript/jquery.flot.js'
        script src: '/javascript/processing.js'
        script src: '/socket.io/socket.io.js'
        coffeescript ->
            graphDataSize = 50
            randomData = new Array graphDataSize
            linearData = new Array graphDataSize

            class SocketPlotter
                # Other options later - plot size etc.
                constructor: (handle, socket, dataSize, dims) ->
                    @data = new Array dataSize
                    @socket = io.connect socket
                    @socket.on 'data', (data) =>
                        for i in [0...dataSize]
                            @data[i] = if data[i] >= 128 then data[i] - 256 else data[i] 


                    @opts = 
                        dimensions:
                            width: dims.width
                            height: dims.height
                        rangeY: 256
                        centerY: dims.height / 2
                        scaleY: dims.height / 256
                        stepX: dims.width / (dataSize - 1)
                        lastY: dims.height / 2 
                        frameRate: 10

                    @processing = new Processing handle, @sketch


                sketch: (p) =>
                    p.frameRate @opts.frameRate
                    p.size @opts.dimensions.width, @opts.dimensions.height

                    p.draw = () =>
                        p.background 224
                        p.stroke 25
                        p.strokeWeight 1
                        p.line 0, @opts.centerY, p.width, @opts.centerY

                        p.stroke 0
                        p.strokeWeight 3
                        lastX = 0
                        nextX = lastX + @opts.stepX
                        for point in @data
                            nextY = @opts.centerY - (point * @opts.scaleY)
                            p.line lastX, @opts.lastY, nextX, nextY
                            lastX += @opts.stepX
                            nextX += @opts.stepX
                            @opts.lastY = nextY
                        return


            $().ready ->
                random = new SocketPlotter $('#random')[0], '/random', 50, height: 250, width: 600 
                linear = new SocketPlotter $('#linear')[0], '/linear', 50, height: 250, width: 600

    body ->
        h1 @title
        div ->
            canvas id: 'random'
        div ->
            canvas id: 'linear'

